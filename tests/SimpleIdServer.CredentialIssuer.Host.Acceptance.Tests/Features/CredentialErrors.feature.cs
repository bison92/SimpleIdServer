// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.CredentialIssuer.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CredentialErrorsFeature : object, Xunit.IClassFixture<CredentialErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CredentialErrors.feature"
#line hidden
        
        public CredentialErrorsFeature(CredentialErrorsFeature.FixtureData fixtureData, SimpleIdServer_CredentialIssuer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CredentialErrors", "\tCheck the errors returned by the credential endpoint", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="format parameter is required when credential_identifiers are not returned from th" +
            "e Token Response")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "format parameter is required when credential_identifiers are not returned from th" +
            "e Token Response")]
        public void FormatParameterIsRequiredWhenCredential_IdentifiersAreNotReturnedFromTheTokenResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("format parameter is required when credential_identifiers are not returned from th" +
                    "e Token Response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table5, "When ");
#line hidden
#line 8
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("JSON \'error\'=\'invalid_credential_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("JSON \'error_description\'=\'the parameter format is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="proof_type is required when the proof parameter is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "proof_type is required when the proof parameter is passed")]
        public void Proof_TypeIsRequiredWhenTheProofParameterIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("proof_type is required when the proof parameter is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table6.AddRow(new string[] {
                            "proof",
                            "{ }"});
                table6.AddRow(new string[] {
                            "format",
                            "format"});
#line 15
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table6, "When ");
#line hidden
#line 20
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.And("JSON \'error\'=\'invalid_credential_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("JSON \'error_description\'=\'the parameter proof_type is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="proof_type must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "proof_type must be supported")]
        public void Proof_TypeMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("proof_type must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table7.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"invalid\" }"});
                table7.AddRow(new string[] {
                            "format",
                            "format"});
#line 27
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table7, "When ");
#line hidden
#line 32
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And("JSON \'error\'=\'invalid_credential_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And("JSON \'error_description\'=\'the proof format invalid is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="proof typ must be equals to openid4vci-proof+jwt")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "proof typ must be equals to openid4vci-proof+jwt")]
        public void ProofTypMustBeEqualsToOpenid4Vci_ProofJwt()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("proof typ must be equals to openid4vci-proof+jwt", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table8.AddRow(new string[] {
                            "typ",
                            "invalid"});
#line 39
 testRunner.Given("build jwt proof", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table9.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table9.AddRow(new string[] {
                            "format",
                            "format"});
#line 43
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table9, "When ");
#line hidden
#line 48
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.And("JSON \'error\'=\'invalid_proof\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("JSON \'error_description\'=\'the proof typ must be equals to openid4vci-proof+jwt\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="proof kid must be a did")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "proof kid must be a did")]
        public void ProofKidMustBeADid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("proof kid must be a did", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table10.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
                table10.AddRow(new string[] {
                            "kid",
                            "did"});
#line 55
 testRunner.Given("build jwt proof", ((string)(null)), table10, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table11.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table11.AddRow(new string[] {
                            "format",
                            "format"});
#line 60
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table11, "When ");
#line hidden
#line 65
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.And("JSON \'error\'=\'invalid_proof\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And("JSON \'error_description\'=\'did doesn\'t have the correct format\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="credential_identifier must be present when access token contains credential_ident" +
            "ifiers")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "credential_identifier must be present when access token contains credential_ident" +
            "ifiers")]
        public void Credential_IdentifierMustBePresentWhenAccessTokenContainsCredential_Identifiers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("credential_identifier must be present when access token contains credential_ident" +
                    "ifiers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table12.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 72
 testRunner.Given("build jwt proof", ((string)(null)), table12, "Given ");
#line hidden
#line 76
 testRunner.And("access token contains one credential identifier \'ItMaster\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table13.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table13.AddRow(new string[] {
                            "format",
                            "format"});
#line 78
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table13, "When ");
#line hidden
#line 83
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.And("JSON \'error\'=\'invalid_credential_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("JSON \'error_description\'=\'the parameter credential_identifier is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="format parameter must not be present when the credential_identifier parameter is " +
            "passed")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "format parameter must not be present when the credential_identifier parameter is " +
            "passed")]
        public void FormatParameterMustNotBePresentWhenTheCredential_IdentifierParameterIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("format parameter must not be present when the credential_identifier parameter is " +
                    "passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table14.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 90
 testRunner.Given("build jwt proof", ((string)(null)), table14, "Given ");
#line hidden
#line 94
 testRunner.And("access token contains one credential identifier \'ItMaster\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table15.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table15.AddRow(new string[] {
                            "format",
                            "format"});
                table15.AddRow(new string[] {
                            "credential_identifier",
                            "ItMaster"});
#line 96
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table15, "When ");
#line hidden
#line 102
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
 testRunner.And("JSON \'error\'=\'invalid_credential_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("JSON \'error_description\'=\'the credential_identifier parameter cannot be used with" +
                        " the format parameter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="credential_identifier parameter must be present in the access token")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "credential_identifier parameter must be present in the access token")]
        public void Credential_IdentifierParameterMustBePresentInTheAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("credential_identifier parameter must be present in the access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table16.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 109
 testRunner.Given("build jwt proof", ((string)(null)), table16, "Given ");
#line hidden
#line 113
 testRunner.And("access token contains one credential identifier \'ItMaster\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table17.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table17.AddRow(new string[] {
                            "credential_identifier",
                            "Invalid"});
#line 115
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table17, "When ");
#line hidden
#line 120
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.And("JSON \'error\'=\'invalid_credential_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
 testRunner.And("JSON \'error_description\'=\'the credential_identifier parameter is not valid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="format must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "format must be supported")]
        public void FormatMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("format must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table18.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 127
 testRunner.Given("build jwt proof", ((string)(null)), table18, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table19.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table19.AddRow(new string[] {
                            "format",
                            "format"});
#line 131
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table19, "When ");
#line hidden
#line 136
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.And("JSON \'error\'=\'unsupported_credential_format\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And("JSON \'error_description\'=\'the credential format format is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="the credential_definition parameter is required when format is equals to jwt_vc_j" +
            "son")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "the credential_definition parameter is required when format is equals to jwt_vc_j" +
            "son")]
        public void TheCredential_DefinitionParameterIsRequiredWhenFormatIsEqualsToJwt_Vc_Json()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the credential_definition parameter is required when format is equals to jwt_vc_j" +
                    "son", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table20.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 143
 testRunner.Given("build jwt proof", ((string)(null)), table20, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table21.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table21.AddRow(new string[] {
                            "format",
                            "jwt_vc_json"});
#line 147
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table21, "When ");
#line hidden
#line 152
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
 testRunner.And("JSON \'error\'=\'invalid_credential_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
 testRunner.And("JSON \'error_description\'=\'the credential type cannot be extracted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="the type parameter is required when format is equals to jwt_vc_json")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "the type parameter is required when format is equals to jwt_vc_json")]
        public void TheTypeParameterIsRequiredWhenFormatIsEqualsToJwt_Vc_Json()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the type parameter is required when format is equals to jwt_vc_json", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table22.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 159
 testRunner.Given("build jwt proof", ((string)(null)), table22, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table23.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table23.AddRow(new string[] {
                            "format",
                            "jwt_vc_json"});
                table23.AddRow(new string[] {
                            "credential_definition",
                            "{ }"});
#line 163
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table23, "When ");
#line hidden
#line 169
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.And("JSON \'error\'=\'invalid_credential_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And("JSON \'error_description\'=\'the credential type cannot be extracted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="the credential type must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "the credential type must be supported")]
        public void TheCredentialTypeMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the credential type must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 175
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table24.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 176
 testRunner.Given("build jwt proof", ((string)(null)), table24, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table25.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table25.AddRow(new string[] {
                            "format",
                            "jwt_vc_json"});
                table25.AddRow(new string[] {
                            "credential_definition",
                            "{ \"type\" : [\"VerifiableCredential\",\"Type\"] }"});
#line 180
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table25, "When ");
#line hidden
#line 186
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 189
 testRunner.And("JSON \'error\'=\'unsupported_credential_type\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
 testRunner.And("JSON \'error_description\'=\'the credential type Type is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="the alg parameter is required when credential_response_encryption is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "the alg parameter is required when credential_response_encryption is passed")]
        public void TheAlgParameterIsRequiredWhenCredential_Response_EncryptionIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the alg parameter is required when credential_response_encryption is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 192
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table26.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 193
 testRunner.Given("build jwt proof", ((string)(null)), table26, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table27.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table27.AddRow(new string[] {
                            "format",
                            "jwt_vc_json"});
                table27.AddRow(new string[] {
                            "credential_definition",
                            "{ \"type\" : [\"VerifiableCredential\",\"UniversityDegree\"] }"});
                table27.AddRow(new string[] {
                            "credential_response_encryption",
                            "{ }"});
#line 197
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table27, "When ");
#line hidden
#line 204
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 207
 testRunner.And("JSON \'error\'=\'invalid_encryption_parameters\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.And("JSON \'error_description\'=\'the parameter alg is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="the enc parameter is required when credential_response_encryption is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "the enc parameter is required when credential_response_encryption is passed")]
        public void TheEncParameterIsRequiredWhenCredential_Response_EncryptionIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the enc parameter is required when credential_response_encryption is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 210
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table28.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 211
 testRunner.Given("build jwt proof", ((string)(null)), table28, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table29.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table29.AddRow(new string[] {
                            "format",
                            "jwt_vc_json"});
                table29.AddRow(new string[] {
                            "credential_definition",
                            "{ \"type\" : [\"VerifiableCredential\",\"UniversityDegree\"] }"});
                table29.AddRow(new string[] {
                            "credential_response_encryption",
                            "{ \"alg\": \"alg\" }"});
#line 215
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table29, "When ");
#line hidden
#line 222
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 224
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 225
 testRunner.And("JSON \'error\'=\'invalid_encryption_parameters\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 226
 testRunner.And("JSON \'error_description\'=\'the parameter enc is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="the jwk parameter is required when credential_response_encryption is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "CredentialErrors")]
        [Xunit.TraitAttribute("Description", "the jwk parameter is required when credential_response_encryption is passed")]
        public void TheJwkParameterIsRequiredWhenCredential_Response_EncryptionIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the jwk parameter is required when credential_response_encryption is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 228
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table30.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
#line 229
 testRunner.Given("build jwt proof", ((string)(null)), table30, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table31.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$jwtProof$\" }"});
                table31.AddRow(new string[] {
                            "format",
                            "jwt_vc_json"});
                table31.AddRow(new string[] {
                            "credential_definition",
                            "{ \"type\" : [\"VerifiableCredential\",\"UniversityDegree\"] }"});
                table31.AddRow(new string[] {
                            "credential_response_encryption",
                            "{ \"alg\": \"alg\", \"enc\": \"enc\" }"});
#line 233
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential\'", ((string)(null)), table31, "When ");
#line hidden
#line 240
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 243
 testRunner.And("JSON \'error\'=\'invalid_encryption_parameters\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
 testRunner.And("JSON \'error_description\'=\'the parameter jwk is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CredentialErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CredentialErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
