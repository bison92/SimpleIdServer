// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features.GrantTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class HappyFlowsFeature : object, Xunit.IClassFixture<HappyFlowsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "HappyFlows.feature"
#line hidden
        
        public HappyFlowsFeature(HappyFlowsFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/GrantTypes", "HappyFlows", "\tRun happy flows for all the grant types", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'client_credentials\' grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'client_credentials\' grant type to get an access token")]
        public void UseClient_CredentialsGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'client_credentials\' grant type to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table248.AddRow(new string[] {
                            "client_id",
                            "firstClient"});
                table248.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table248.AddRow(new string[] {
                            "scope",
                            "firstScope"});
                table248.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 5
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table248, "When ");
#line hidden
#line 12
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("JSON \'$.scope\'=\'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("access_token audience contains \'firstClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("access_token audience contains \'secondClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("access_token scope contains \'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("access_token alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("access_token kid equals to \'keyid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'password\' grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'password\' grant type to get an access token")]
        public void UsePasswordGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'password\' grant type to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table249.AddRow(new string[] {
                            "client_id",
                            "secondClient"});
                table249.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table249.AddRow(new string[] {
                            "scope",
                            "firstScope"});
                table249.AddRow(new string[] {
                            "grant_type",
                            "password"});
                table249.AddRow(new string[] {
                            "username",
                            "user"});
                table249.AddRow(new string[] {
                            "password",
                            "password"});
#line 25
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table249, "When ");
#line hidden
#line 34
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.And("JSON \'$.scope\'=\'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.And("access_token audience contains \'firstClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("access_token audience contains \'secondClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("access_token scope contains \'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("access_token alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("access_token kid equals to \'keyid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'authorization_code\' grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'authorization_code\' grant type to get an access token")]
        public void UseAuthorization_CodeGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'authorization_code\' grant type to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table250.AddRow(new string[] {
                            "response_type",
                            "code"});
                table250.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table250.AddRow(new string[] {
                            "state",
                            "state"});
                table250.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table250.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table250.AddRow(new string[] {
                            "scope",
                            "secondScope"});
#line 48
 testRunner.When("execute HTTP GET request \'https://localhost:8080/authorization\'", ((string)(null)), table250, "When ");
#line hidden
#line 57
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("extract parameter \'state\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table251.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table251.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table251.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table251.AddRow(new string[] {
                            "code",
                            "$code$"});
                table251.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 60
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table251, "And ");
#line hidden
#line 68
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
 testRunner.And("JSON \'$.scope\'=\'secondScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("parameter \'state\'=\'state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("access_token audience contains \'thirdClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'authorization_code\' grant type to get an access token and use PAR")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'authorization_code\' grant type to get an access token and use PAR")]
        public void UseAuthorization_CodeGrantTypeToGetAnAccessTokenAndUsePAR()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'authorization_code\' grant type to get an access token and use PAR", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table252.AddRow(new string[] {
                            "response_type",
                            "code"});
                table252.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table252.AddRow(new string[] {
                            "state",
                            "state"});
                table252.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table252.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table252.AddRow(new string[] {
                            "scope",
                            "secondScope"});
#line 79
 testRunner.When("execute HTTP POST request \'https://localhost:8080/par\'", ((string)(null)), table252, "When ");
#line hidden
#line 88
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("extract parameter \'request_uri\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table253.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table253.AddRow(new string[] {
                            "request_uri",
                            "$request_uri$"});
#line 91
 testRunner.And("execute HTTP GET request \'https://localhost:8080/authorization\'", ((string)(null)), table253, "And ");
#line hidden
#line 96
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.And("extract parameter \'state\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table254.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table254.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table254.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table254.AddRow(new string[] {
                            "code",
                            "$code$"});
                table254.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 99
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table254, "And ");
#line hidden
#line 107
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
 testRunner.And("JSON \'$.scope\'=\'secondScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.And("parameter \'state\'=\'state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.And("access_token audience contains \'thirdClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'authorization_code\' grant type to get an access token and use PAR and RAR")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'authorization_code\' grant type to get an access token and use PAR and RAR")]
        public void UseAuthorization_CodeGrantTypeToGetAnAccessTokenAndUsePARAndRAR()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'authorization_code\' grant type to get an access token and use PAR and RAR", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 117
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table255.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table255.AddRow(new string[] {
                            "client_id",
                            "fiftyFiveClient"});
                table255.AddRow(new string[] {
                            "state",
                            "state"});
                table255.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table255.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table255.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table255.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"secondDetails\", \"locations\": [ \"https://cal.example.com\" ], \"actions\"" +
                                ": [ \"read\" ] }"});
#line 118
 testRunner.When("execute HTTP POST request \'https://localhost:8080/par\'", ((string)(null)), table255, "When ");
#line hidden
#line 128
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
 testRunner.And("extract parameter \'request_uri\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table256.AddRow(new string[] {
                            "client_id",
                            "fiftyFiveClient"});
                table256.AddRow(new string[] {
                            "request_uri",
                            "$request_uri$"});
#line 131
 testRunner.And("execute HTTP GET request \'https://localhost:8080/authorization\'", ((string)(null)), table256, "And ");
#line hidden
#line 136
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
 testRunner.And("extract parameter \'state\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table257.AddRow(new string[] {
                            "client_id",
                            "fiftyFiveClient"});
                table257.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table257.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table257.AddRow(new string[] {
                            "code",
                            "$code$"});
                table257.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 139
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table257, "And ");
#line hidden
#line 147
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
 testRunner.And("extract payload from JWT \'$access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
 testRunner.Then("JWT has authorization_details type \'secondDetails\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
 testRunner.And("JWT has authorization_details action \'read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.And("access_token audience contains \'fiftyFiveClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'refresh_token\' grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'refresh_token\' grant type to get an access token")]
        public void UseRefresh_TokenGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'refresh_token\' grant type to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table258.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
                table258.AddRow(new string[] {
                            "scope",
                            "secondScope"});
                table258.AddRow(new string[] {
                            "client_id",
                            "sixClient"});
                table258.AddRow(new string[] {
                            "client_secret",
                            "password"});
#line 156
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table258, "When ");
#line hidden
#line 163
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
 testRunner.And("extract parameter \'$.refresh_token\' from JSON body into \'refreshToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table259.AddRow(new string[] {
                            "grant_type",
                            "refresh_token"});
                table259.AddRow(new string[] {
                            "refresh_token",
                            "$refreshToken$"});
                table259.AddRow(new string[] {
                            "client_id",
                            "sixClient"});
                table259.AddRow(new string[] {
                            "client_secret",
                            "password"});
#line 166
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table259, "And ");
#line hidden
#line 173
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
 testRunner.And("JSON \'$.scope\'=\'secondScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.And("access_token audience contains \'sixClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
            " mode)")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
            " mode)")]
        public void UseUrnOpenidParamsGrant_TypeCibaGrantTypeToGetAnIdentityTokenPOLLMode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
                    " mode)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 181
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table260.AddRow(new string[] {
                            "sub",
                            "user"});
#line 182
 testRunner.And("build access_token and sign with the key \'keyid\'", ((string)(null)), table260, "And ");
#line hidden
                TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table261.AddRow(new string[] {
                            "client_id",
                            "fortyNineClient"});
                table261.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table261.AddRow(new string[] {
                            "scope",
                            "admin calendar"});
                table261.AddRow(new string[] {
                            "login_hint",
                            "user"});
                table261.AddRow(new string[] {
                            "user_code",
                            "password"});
#line 186
 testRunner.When("execute HTTP POST request \'https://localhost:8080/bc-authorize\'", ((string)(null)), table261, "When ");
#line hidden
#line 194
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table262.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
                table262.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
                table262.AddRow(new string[] {
                            "action",
                            "0"});
#line 197
 testRunner.And("execute HTTP POST JSON request \'http://localhost/bc-callback\'", ((string)(null)), table262, "And ");
#line hidden
                TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table263.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table263.AddRow(new string[] {
                            "client_id",
                            "fortyNineClient"});
                table263.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table263.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
#line 203
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table263, "And ");
#line hidden
#line 210
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 211
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 212
 testRunner.And("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 213
 testRunner.And("access_token audience contains \'fortyNineClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PUSH" +
            " mode)")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PUSH" +
            " mode)")]
        public void UseUrnOpenidParamsGrant_TypeCibaGrantTypeToGetAnIdentityTokenPUSHMode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PUSH" +
                    " mode)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 215
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 216
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table264.AddRow(new string[] {
                            "sub",
                            "user"});
#line 218
 testRunner.And("build access_token and sign with the key \'keyid\'", ((string)(null)), table264, "And ");
#line hidden
                TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table265.AddRow(new string[] {
                            "client_id",
                            "fiftyOneClient"});
                table265.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table265.AddRow(new string[] {
                            "scope",
                            "admin calendar"});
                table265.AddRow(new string[] {
                            "login_hint",
                            "user"});
                table265.AddRow(new string[] {
                            "user_code",
                            "password"});
                table265.AddRow(new string[] {
                            "client_notification_token",
                            "04bcf708-dfba-4719-a3d3-b213322e2c38"});
#line 222
 testRunner.When("execute HTTP POST request \'https://localhost:8080/bc-authorize\'", ((string)(null)), table265, "When ");
#line hidden
#line 231
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 232
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table266.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
                table266.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
                table266.AddRow(new string[] {
                            "action",
                            "0"});
#line 234
 testRunner.And("execute HTTP POST JSON request \'http://localhost/bc-callback\'", ((string)(null)), table266, "And ");
#line hidden
#line 240
 testRunner.And("polls until notification is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
 testRunner.Then("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 243
 testRunner.And("access_token audience contains \'fiftyOneClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PING" +
            " mode)")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PING" +
            " mode)")]
        public void UseUrnOpenidParamsGrant_TypeCibaGrantTypeToGetAnIdentityTokenPINGMode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PING" +
                    " mode)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 245
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 246
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table267.AddRow(new string[] {
                            "response_type",
                            "id_token token"});
                table267.AddRow(new string[] {
                            "client_id",
                            "fourteenClient"});
                table267.AddRow(new string[] {
                            "state",
                            "state"});
                table267.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table267.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table267.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table267.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 248
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table267, "When ");
#line hidden
#line 258
 testRunner.And("extract parameter \'access_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table268.AddRow(new string[] {
                            "client_id",
                            "fiftyTwoClient"});
                table268.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table268.AddRow(new string[] {
                            "scope",
                            "admin calendar"});
                table268.AddRow(new string[] {
                            "login_hint",
                            "user"});
                table268.AddRow(new string[] {
                            "user_code",
                            "password"});
                table268.AddRow(new string[] {
                            "client_notification_token",
                            "04bcf708-dfba-4719-a3d3-b213322e2c38"});
#line 260
 testRunner.And("execute HTTP POST request \'https://localhost:8080/bc-authorize\'", ((string)(null)), table268, "And ");
#line hidden
#line 269
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table269.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
                table269.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
                table269.AddRow(new string[] {
                            "action",
                            "0"});
#line 272
 testRunner.And("execute HTTP POST JSON request \'http://localhost/bc-callback\'", ((string)(null)), table269, "And ");
#line hidden
#line 278
 testRunner.And("polls until notification is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 279
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table270.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table270.AddRow(new string[] {
                            "client_id",
                            "fiftyTwoClient"});
                table270.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table270.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
#line 281
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table270, "And ");
#line hidden
#line 288
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 290
 testRunner.And("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:ietf:params:oauth:grant-type:uma-ticket\' grant type to get an access tok" +
            "en")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:ietf:params:oauth:grant-type:uma-ticket\' grant type to get an access tok" +
            "en")]
        public void UseUrnIetfParamsOauthGrant_TypeUma_TicketGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:ietf:params:oauth:grant-type:uma-ticket\' grant type to get an access tok" +
                    "en", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 292
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table271.AddRow(new string[] {
                            "sub",
                            "user"});
                table271.AddRow(new string[] {
                            "email",
                            "user@hotmail.fr"});
#line 293
 testRunner.Given("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table271, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table272.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table272.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table272.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table272.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 298
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table272, "When ");
#line hidden
#line 305
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 306
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table273.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\",\"scope2\"]"});
                table273.AddRow(new string[] {
                            "subject",
                            "user1"});
                table273.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table273.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table273.AddRow(new string[] {
                            "name#en",
                            "name"});
                table273.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table273.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table273.AddRow(new string[] {
                            "type",
                            "type"});
                table273.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 308
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table273, "And ");
#line hidden
#line 320
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 321
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table274.AddRow(new string[] {
                            "permissions",
                            "[ { \"claims\": [ { \"name\": \"sub\", \"value\": \"user\" }, { \"name\": \"email\", \"value\": \"" +
                                "user@hotmail.com\" } ], \"scopes\": [ \"scope1\", \"scope2\" ] } ]"});
                table274.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 323
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table274, "And ");
#line hidden
                TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table275.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table275.AddRow(new string[] {
                            "resource_scopes",
                            "[\"scope1\",\"scope2\"]"});
                table275.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 328
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table275, "And ");
#line hidden
#line 334
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 335
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table276.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table276.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table276.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table276.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table276.AddRow(new string[] {
                            "claim_token",
                            "$id_token_hint$"});
                table276.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table276.AddRow(new string[] {
                            "scope",
                            "scope1 scope2"});
#line 337
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table276, "And ");
#line hidden
#line 347
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 348
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 350
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 351
 testRunner.And("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 352
 testRunner.And("JSON exists \'refresh_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 353
 testRunner.And("access_token has permission to access to the resource id \'$_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 354
 testRunner.And("access_token has permission to access to the scope \'scope1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 355
 testRunner.And("access_token has permission to access to the scope \'scope2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
            " mode) with authorization_details")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
            " mode) with authorization_details")]
        public void UseUrnOpenidParamsGrant_TypeCibaGrantTypeToGetAnIdentityTokenPOLLModeWithAuthorization_Details()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
                    " mode) with authorization_details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 357
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 358
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table277.AddRow(new string[] {
                            "response_type",
                            "id_token token"});
                table277.AddRow(new string[] {
                            "client_id",
                            "fourteenClient"});
                table277.AddRow(new string[] {
                            "state",
                            "state"});
                table277.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table277.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table277.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table277.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 360
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table277, "When ");
#line hidden
#line 370
 testRunner.And("extract parameter \'access_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table278.AddRow(new string[] {
                            "client_id",
                            "fortyNineClient"});
                table278.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table278.AddRow(new string[] {
                            "login_hint",
                            "user"});
                table278.AddRow(new string[] {
                            "user_code",
                            "password"});
                table278.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"secondDetails\", \"locations\": [ \"https://cal.example.com\" ], \"actions\"" +
                                ": [ \"read\" ] }"});
#line 372
 testRunner.And("execute HTTP POST request \'https://localhost:8080/bc-authorize\'", ((string)(null)), table278, "And ");
#line hidden
#line 380
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 381
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table279.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
                table279.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
                table279.AddRow(new string[] {
                            "action",
                            "0"});
#line 383
 testRunner.And("execute HTTP POST JSON request \'http://localhost/bc-callback\'", ((string)(null)), table279, "And ");
#line hidden
                TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table280.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table280.AddRow(new string[] {
                            "client_id",
                            "fortyNineClient"});
                table280.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table280.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
#line 389
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table280, "And ");
#line hidden
#line 396
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 397
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 398
 testRunner.And("extract payload from JWT \'$access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 400
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 401
 testRunner.And("JWT has authorization_details type \'secondDetails\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 402
 testRunner.And("JWT has authorization_details action \'read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:ietf:params:oauth:grant-type:pre-authorized_code\' grant type to get an a" +
            "ccess token with authorization details")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:ietf:params:oauth:grant-type:pre-authorized_code\' grant type to get an a" +
            "ccess token with authorization details")]
        public void UseUrnIetfParamsOauthGrant_TypePre_Authorized_CodeGrantTypeToGetAnAccessTokenWithAuthorizationDetails()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:ietf:params:oauth:grant-type:pre-authorized_code\' grant type to get an a" +
                    "ccess token with authorization details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 404
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table281.AddRow(new string[] {
                            "sub",
                            "otpUser"});
#line 405
 testRunner.Given("build access_token and sign with the key \'keyid\'", ((string)(null)), table281, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table282.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:exchange-pre-authorized_code"});
                table282.AddRow(new string[] {
                            "client_id",
                            "seventyTwoClient"});
                table282.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table282.AddRow(new string[] {
                            "subject_token",
                            "$access_token$"});
                table282.AddRow(new string[] {
                            "subject_token_type",
                            "urn:ietf:params:oauth:token-type:access_token"});
                table282.AddRow(new string[] {
                            "scope",
                            "UniversityCredential"});
#line 409
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table282, "When ");
#line hidden
#line 418
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 419
 testRunner.And("extract parameter \'$.pre-authorized_code\' from JSON body into \'preAuthorizedCode\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table283.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:pre-authorized_code"});
                table283.AddRow(new string[] {
                            "client_id",
                            "seventyThreeClient"});
                table283.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table283.AddRow(new string[] {
                            "pre-authorized_code",
                            "$preAuthorizedCode$"});
#line 421
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table283, "And ");
#line hidden
#line 428
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 429
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 430
 testRunner.And("extract payload from JWT \'$access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 432
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:ietf:params:oauth:grant-type:device_code\' grant type to get an access to" +
            "ken")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:ietf:params:oauth:grant-type:device_code\' grant type to get an access to" +
            "ken")]
        public void UseUrnIetfParamsOauthGrant_TypeDevice_CodeGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:ietf:params:oauth:grant-type:device_code\' grant type to get an access to" +
                    "ken", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 434
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 435
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table284.AddRow(new string[] {
                            "client_id",
                            "sixtyOneClient"});
                table284.AddRow(new string[] {
                            "scope",
                            "admin"});
#line 437
 testRunner.When("execute HTTP POST request \'https://localhost:8080/device_authorization\'", ((string)(null)), table284, "When ");
#line hidden
#line 442
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 443
 testRunner.And("extract parameter \'device_code\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 444
 testRunner.And("extract parameter \'user_code\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table285.AddRow(new string[] {
                            "UserCode",
                            "$user_code$"});
#line 446
 testRunner.And("execute HTTP POST request \'https://localhost:8080/Device\'", ((string)(null)), table285, "And ");
#line hidden
                TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table286.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:device_code"});
                table286.AddRow(new string[] {
                            "client_id",
                            "sixtyOneClient"});
                table286.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table286.AddRow(new string[] {
                            "device_code",
                            "$device_code$"});
#line 450
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table286, "When ");
#line hidden
#line 457
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 459
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'client_credentials\' grant type and DPoP to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'client_credentials\' grant type and DPoP to get an access token")]
        public void UseClient_CredentialsGrantTypeAndDPoPToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'client_credentials\' grant type and DPoP to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 461
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table287.AddRow(new string[] {
                            "htm",
                            "POST"});
                table287.AddRow(new string[] {
                            "htu",
                            "https://localhost:8080/token"});
#line 462
 testRunner.When("build DPoP proof", ((string)(null)), table287, "When ");
#line hidden
                TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table288.AddRow(new string[] {
                            "client_id",
                            "sixtyThreeClient"});
                table288.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table288.AddRow(new string[] {
                            "scope",
                            "firstScope"});
                table288.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
                table288.AddRow(new string[] {
                            "DPoP",
                            "$DPOP$"});
#line 467
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table288, "And ");
#line hidden
#line 475
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 477
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 478
 testRunner.And("JSON \'$.scope\'=\'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 479
 testRunner.And("JSON \'$.token_type\'=\'DPoP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 480
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 481
 testRunner.And("access_token contains jkt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'refresh_token\' grant type and DPoP to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'refresh_token\' grant type and DPoP to get an access token")]
        public void UseRefresh_TokenGrantTypeAndDPoPToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'refresh_token\' grant type and DPoP to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 483
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table289.AddRow(new string[] {
                            "htm",
                            "POST"});
                table289.AddRow(new string[] {
                            "htu",
                            "https://localhost:8080/token"});
#line 484
 testRunner.When("build DPoP proof", ((string)(null)), table289, "When ");
#line hidden
                TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table290.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
                table290.AddRow(new string[] {
                            "scope",
                            "firstScope"});
                table290.AddRow(new string[] {
                            "client_id",
                            "sixtyThreeClient"});
                table290.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table290.AddRow(new string[] {
                            "DPoP",
                            "$DPOP$"});
#line 489
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table290, "And ");
#line hidden
#line 497
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 498
 testRunner.And("extract parameter \'$.refresh_token\' from JSON body into \'refreshToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table291.AddRow(new string[] {
                            "grant_type",
                            "refresh_token"});
                table291.AddRow(new string[] {
                            "refresh_token",
                            "$refreshToken$"});
                table291.AddRow(new string[] {
                            "client_id",
                            "sixtyThreeClient"});
                table291.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table291.AddRow(new string[] {
                            "DPoP",
                            "$DPOP$"});
#line 500
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table291, "And ");
#line hidden
#line 508
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 510
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 511
 testRunner.And("JSON \'$.scope\'=\'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 512
 testRunner.And("JSON \'$.token_type\'=\'DPoP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 513
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 514
 testRunner.And("access_token contains jkt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'authorization_code\' grant type to get an access token and use PAR and DPoP")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'authorization_code\' grant type to get an access token and use PAR and DPoP")]
        public void UseAuthorization_CodeGrantTypeToGetAnAccessTokenAndUsePARAndDPoP()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'authorization_code\' grant type to get an access token and use PAR and DPoP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 516
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 517
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 519
 testRunner.When("build security key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table292.AddRow(new string[] {
                            "response_type",
                            "code"});
                table292.AddRow(new string[] {
                            "client_id",
                            "sixtyFiveClient"});
                table292.AddRow(new string[] {
                            "state",
                            "state"});
                table292.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table292.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table292.AddRow(new string[] {
                            "scope",
                            "secondScope"});
                table292.AddRow(new string[] {
                            "dpop_jkt",
                            "$jkt$"});
#line 521
 testRunner.And("execute HTTP POST request \'https://localhost:8080/par\'", ((string)(null)), table292, "And ");
#line hidden
#line 531
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 532
 testRunner.And("extract parameter \'request_uri\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table293.AddRow(new string[] {
                            "client_id",
                            "sixtyFiveClient"});
                table293.AddRow(new string[] {
                            "request_uri",
                            "$request_uri$"});
#line 534
 testRunner.And("execute HTTP GET request \'https://localhost:8080/authorization\'", ((string)(null)), table293, "And ");
#line hidden
#line 539
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 540
 testRunner.And("extract parameter \'state\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table294.AddRow(new string[] {
                            "htm",
                            "POST"});
                table294.AddRow(new string[] {
                            "htu",
                            "https://localhost:8080/token"});
#line 542
 testRunner.And("build DPoP proof", ((string)(null)), table294, "And ");
#line hidden
                TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table295.AddRow(new string[] {
                            "client_id",
                            "sixtyFiveClient"});
                table295.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table295.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table295.AddRow(new string[] {
                            "code",
                            "$code$"});
                table295.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table295.AddRow(new string[] {
                            "DPoP",
                            "$DPOP$"});
#line 547
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table295, "And ");
#line hidden
#line 556
 testRunner.And("extract header \'DPoP-Nonce\' to \'nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table296.AddRow(new string[] {
                            "htm",
                            "POST"});
                table296.AddRow(new string[] {
                            "htu",
                            "https://localhost:8080/token"});
                table296.AddRow(new string[] {
                            "nonce",
                            "$nonce$"});
#line 558
 testRunner.And("build DPoP proof", ((string)(null)), table296, "And ");
#line hidden
                TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table297.AddRow(new string[] {
                            "client_id",
                            "sixtyFiveClient"});
                table297.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table297.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table297.AddRow(new string[] {
                            "code",
                            "$code$"});
                table297.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table297.AddRow(new string[] {
                            "DPoP",
                            "$DPOP$"});
#line 564
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table297, "And ");
#line hidden
#line 573
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 575
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 576
 testRunner.And("JSON \'$.scope\'=\'secondScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 577
 testRunner.And("JSON \'$.token_type\'=\'DPoP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 578
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 579
 testRunner.And("access_token contains jkt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:ietf:params:oauth:grant-type:token-exchange\' grant_type and impersonatio" +
            "n to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:ietf:params:oauth:grant-type:token-exchange\' grant_type and impersonatio" +
            "n to get an access token")]
        public void UseUrnIetfParamsOauthGrant_TypeToken_ExchangeGrant_TypeAndImpersonationToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:ietf:params:oauth:grant-type:token-exchange\' grant_type and impersonatio" +
                    "n to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 581
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table298.AddRow(new string[] {
                            "client_id",
                            "fortyFourClient"});
#line 582
 testRunner.Given("build access_token and sign with the key \'keyid\'", ((string)(null)), table298, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table299.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:token-exchange"});
                table299.AddRow(new string[] {
                            "client_id",
                            "sixtySixClient"});
                table299.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table299.AddRow(new string[] {
                            "subject_token",
                            "$access_token$"});
                table299.AddRow(new string[] {
                            "subject_token_type",
                            "urn:ietf:params:oauth:token-type:access_token"});
#line 586
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table299, "When ");
#line hidden
#line 593
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 595
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 596
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 597
 testRunner.And("JSON \'$.issued_token_type\'=\'urn:ietf:params:oauth:token-type:access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 598
 testRunner.And("access_token contains the claim \'client_id\'=\'fortyFourClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:ietf:params:oauth:grant-type:token-exchange\' grant_type and delegation t" +
            "o get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:ietf:params:oauth:grant-type:token-exchange\' grant_type and delegation t" +
            "o get an access token")]
        public void UseUrnIetfParamsOauthGrant_TypeToken_ExchangeGrant_TypeAndDelegationToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:ietf:params:oauth:grant-type:token-exchange\' grant_type and delegation t" +
                    "o get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 600
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table300.AddRow(new string[] {
                            "client_id",
                            "fortyFourClient"});
#line 601
 testRunner.Given("build access_token and sign with the key \'keyid\'", ((string)(null)), table300, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table301.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:token-exchange"});
                table301.AddRow(new string[] {
                            "client_id",
                            "sixtySevenClient"});
                table301.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table301.AddRow(new string[] {
                            "subject_token",
                            "$access_token$"});
                table301.AddRow(new string[] {
                            "subject_token_type",
                            "urn:ietf:params:oauth:token-type:access_token"});
#line 605
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table301, "When ");
#line hidden
#line 612
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 614
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 615
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 616
 testRunner.And("JSON \'$.issued_token_type\'=\'urn:ietf:params:oauth:token-type:access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 617
 testRunner.And("access_token contains the claim \'client_id\'=\'fortyFourClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 618
 testRunner.And("access_token contains act \'sixtySevenClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:ietf:params:oauth:grant-type:token-exchange\' grant_type and delegation t" +
            "o get an access token with sub act")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:ietf:params:oauth:grant-type:token-exchange\' grant_type and delegation t" +
            "o get an access token with sub act")]
        public void UseUrnIetfParamsOauthGrant_TypeToken_ExchangeGrant_TypeAndDelegationToGetAnAccessTokenWithSubAct()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:ietf:params:oauth:grant-type:token-exchange\' grant_type and delegation t" +
                    "o get an access token with sub act", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 620
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table302.AddRow(new string[] {
                            "client_id",
                            "fortyFourClient"});
#line 621
 testRunner.Given("build access_token and sign with the key \'keyid\'", ((string)(null)), table302, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table303.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:token-exchange"});
                table303.AddRow(new string[] {
                            "client_id",
                            "sixtySevenClient"});
                table303.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table303.AddRow(new string[] {
                            "subject_token",
                            "$access_token$"});
                table303.AddRow(new string[] {
                            "subject_token_type",
                            "urn:ietf:params:oauth:token-type:access_token"});
#line 625
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table303, "When ");
#line hidden
#line 633
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 634
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table304.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:token-exchange"});
                table304.AddRow(new string[] {
                            "client_id",
                            "sixtySevenClient"});
                table304.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table304.AddRow(new string[] {
                            "subject_token",
                            "$access_token$"});
                table304.AddRow(new string[] {
                            "subject_token_type",
                            "urn:ietf:params:oauth:token-type:access_token"});
#line 636
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table304, "And ");
#line hidden
#line 644
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 645
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 646
 testRunner.And("JSON \'$.issued_token_type\'=\'urn:ietf:params:oauth:token-type:access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 647
 testRunner.And("access_token contains the claim \'client_id\'=\'fortyFourClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 648
 testRunner.And("access_token contains act \'sixtySevenClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 649
 testRunner.And("access_token contains sub act \'sixtySevenClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:ietf:params:oauth:grant-type:exchange-pre-authorized_code\' grant-type to" +
            " get the pre-authorized code")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:ietf:params:oauth:grant-type:exchange-pre-authorized_code\' grant-type to" +
            " get the pre-authorized code")]
        public void UseUrnIetfParamsOauthGrant_TypeExchange_Pre_Authorized_CodeGrant_TypeToGetThePre_AuthorizedCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:ietf:params:oauth:grant-type:exchange-pre-authorized_code\' grant-type to" +
                    " get the pre-authorized code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 651
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table305.AddRow(new string[] {
                            "sub",
                            "otpUser"});
#line 652
 testRunner.Given("build access_token and sign with the key \'keyid\'", ((string)(null)), table305, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table306.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:exchange-pre-authorized_code"});
                table306.AddRow(new string[] {
                            "client_id",
                            "seventyTwoClient"});
                table306.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table306.AddRow(new string[] {
                            "subject_token",
                            "$access_token$"});
                table306.AddRow(new string[] {
                            "subject_token_type",
                            "urn:ietf:params:oauth:token-type:access_token"});
                table306.AddRow(new string[] {
                            "scope",
                            "UniversityCredential"});
#line 656
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table306, "When ");
#line hidden
#line 665
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 666
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 667
 testRunner.And("JSON exists \'$.pre-authorized_code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                HappyFlowsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                HappyFlowsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
