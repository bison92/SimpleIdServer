//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleIdServer.FastFed.ApplicationProvider.Resources {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Global {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Global() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SimpleIdServer.FastFed.ApplicationProvider.Resources.Global", typeof(Global).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à The aud attribute doesn&apos;t match the entity_id of the application provider.
        /// </summary>
        internal static string AudienceDoesntMatchEntityIdOfApplicationProvider {
            get {
                return ResourceManager.GetString("AudienceDoesntMatchEntityIdOfApplicationProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à The registration process cannot be completed because the issuer {0} is not in the whitelist.
        /// </summary>
        internal static string CannotCompleteRegistrationForUnknownProvider {
            get {
                return ResourceManager.GetString("CannotCompleteRegistrationForUnknownProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Capabilities cannot be different.
        /// </summary>
        internal static string CapabilitiesCannotBeDifferent {
            get {
                return ResourceManager.GetString("CapabilitiesCannotBeDifferent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Email is invalid.
        /// </summary>
        internal static string EmailIsInvalid {
            get {
                return ResourceManager.GetString("EmailIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Federation with the identity provider is already configured.
        /// </summary>
        internal static string IdentityProviderFederationExists {
            get {
                return ResourceManager.GetString("IdentityProviderFederationExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Identity provider metadata cannot be retrieved.
        /// </summary>
        internal static string IdProviderMetadataCannotBeRetrieved {
            get {
                return ResourceManager.GetString("IdProviderMetadataCannotBeRetrieved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Content type must be equals to &apos;{0}&apos;.
        /// </summary>
        internal static string InvalidContentType {
            get {
                return ResourceManager.GetString("InvalidContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à The JWK Kid {0} doesn&apos;t exist.
        /// </summary>
        internal static string JwkKidIsNotFound {
            get {
                return ResourceManager.GetString("JwkKidIsNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à The Json Web Token signature is not correct.
        /// </summary>
        internal static string JwtSignatureIsNotCorrect {
            get {
                return ResourceManager.GetString("JwtSignatureIsNotCorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Parameter &apos;{0}&apos; is missing.
        /// </summary>
        internal static string MissingParameter {
            get {
                return ResourceManager.GetString("MissingParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Provider metadata cannot be retrieved.
        /// </summary>
        internal static string ProviderMetadataCannotBeRetrieved {
            get {
                return ResourceManager.GetString("ProviderMetadataCannotBeRetrieved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à The provider name suffix {0} is not satisfied.
        /// </summary>
        internal static string ProviderNameSuffixNotSatisfied {
            get {
                return ResourceManager.GetString("ProviderNameSuffixNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à The registration request cannot be empty.
        /// </summary>
        internal static string RegisterRequestCannotBeEmpty {
            get {
                return ResourceManager.GetString("RegisterRequestCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Registration request must be a JSON Web token.
        /// </summary>
        internal static string RegisterRequestMustBeJwt {
            get {
                return ResourceManager.GetString("RegisterRequestMustBeJwt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à The whitelisting process of the identity provider is expired.
        /// </summary>
        internal static string WhitelistingIsExpired {
            get {
                return ResourceManager.GetString("WhitelistingIsExpired", resourceCulture);
            }
        }
    }
}
